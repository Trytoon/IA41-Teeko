"""@desc Ce fichier contient toutes les fonctions qui permettent de compter les jetons et d'afficher la grille"""board = [[0, 0, 0, 0, 0],         [0, 0, 0, 0, 0],         [0, 0, 0, 0, 0],         [0, 0, 0, 0, 0],         [0, 0, 0, 0, 0]]"""@desc Affiche une grille de jeu@param int[] board - Grille actuelle"""def printBoard(board):    # print("\n ===== Plateau de Jeu ======")    for i in range(5):        for j in range(5):            print(board[i][j], end=" ")        print()    print()"""@desc Recupere la valeur d'une case donnée@param int[] board - Grille actuelle@return (int, int) coordinate - Coordonées d'une case"""def getColor(board, coordinate):    if len(coordinate) == 2:        return board[coordinate[0]][coordinate[1]]"""@desc Verifie si un joueur gagne en formant un carré@param int[] board - Grille actuelle@param coordinate - Coordonées d'une case@return color - Numéro du joueur vainqueur"""def checkSquare(matrix, coordinate):    color = getColor(matrix, coordinate)    if countSquare(matrix, coordinate) == 4:        return color    return 0"""@desc Compte le nombre de jetons qui forment un carré à une case donnée@param int[] board - Grille actuelle@param coordinate - Coordonées d'une case@return color - Le nombre de jetons qui forment un carré"""def countSquare(matrix, coordinate):    color = getColor(matrix, coordinate)    search = []    for i in range(coordinate[0] - 1, coordinate[0] + 2):        for j in range(coordinate[1] - 1, coordinate[1] + 2):            if i < 0 or i > 4 or j < 0 or j > 4:                search.append(0)            else:                search.append(matrix[i][j])    count = 0    for i2 in range(0, 5):        temp = int(search[i2] == color) + int(search[i2 + 1] == color) + int(search[i2 + 3] == color) + int(            search[i2 + 4] == color)        count = max(count, temp)    return count"""@desc Calcule les coordonnées de tous les jetons d'un joueur sur la grille@param int[] board - Grille actuelle@param player - Joueur dont on cherche l'implacement des pieces@return (int, int)[] coos - Liste des coordonnées de tous les jetons d'un joueur'"""def searchTokens(board, player):    coos = []    for i in range(5):        for j in range(5):            if board[i][j] == player:                coos.append((i, j))    return coos"""@desc Retourne le nombre maximum de jetons alignés quelque soit la direction, à partir d'une coordonnée@param int[] board - Grille actuelle@param coordinate - Coordonées d'une case@return v - Le nomrbe de jetons alignés à une position précise"""def countAlignedFrom(board, coordinate):    col_count = countInDirection(board, coordinate, 1, 0) + countInDirection(board, coordinate, -1, 0)  # Vertical    line_count = countInDirection(board, coordinate, 0, 1) + countInDirection(board, coordinate, 0, -1)  # Horizontal    diag1_count = countInDirection(board, coordinate, -1, 1) + countInDirection(board, coordinate, 1, -1)  # Diagonal right-down    diag2_count = countInDirection(board, coordinate, 1, 1) + countInDirection(board, coordinate, -1, -1)  # Diagonal right-up    return max(col_count, line_count, diag1_count, diag2_count)"""@desc Retourne le nombre de jetons alignés maximum qu'un joueur possède, toutes positions confondues@param int[] board - Grille actuelle@param joueur - Joueur qui joue@return v - Le nomrbe de jetons alignés maximum"""def countMaxAligned(board, player):    coos = searchTokens(board, player)    v = 0    for i in range(len(coos)):        v = max(v, countAlignedFrom(board, coos[i]))    return v"""@desc Retourne le nombre de jetons en carré maximum qu'un joueur possède, toutes positions confondues@param int[] board - Grille actuelle@param joueur - Joueur qui joue@return v - Le nombre de jetons alignés maximum"""def countMaxInSquare(board, player):    coos = searchTokens(board, player)    v = 0    for i in range(len(coos)):        v = max(v, countSquare(board, coos[i]))    return v"""@desc Recupère une ligne et une coordonnée et compte le nombre de jetons @desc alignés dans cette ligne à partir d'une coordonnée@param int[] board - Grille actuelle@param coordinate - Coordonnée d'origine@param row_step - Le pas de déplacement vertical@param col_step - Le pas de deplacement horizontal@return count - 1 - Le nombre de jetons alignés"""def countInDirection(board, coordinate, row_step, col_step):    count = 0    ligne, colonne = coordinate    color = board[ligne][colonne]    if color != 0:        # Direction positive        r, c = ligne, colonne        while 0 <= r < 5 and 0 <= c < 5:            if board[r][c] == color:                count += 1                r += row_step                c += col_step            else:                break        # Direction négative        r, c = ligne - row_step, colonne - col_step        while 0 <= r < 5 and 0 <= c < 5:            if board[r][c] == color:                count += 1                r -= row_step                c -= col_step            else:                break    return count - 1